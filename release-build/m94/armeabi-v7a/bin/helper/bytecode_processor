#!/usr/bin/env python
#
# This file was generated by build/android/gyp/create_java_binary_script.py

import argparse
import os
import sys

self_dir = os.path.dirname(__file__)
classpath = ["../../lib.java/build/android/bytecode/bytecode_processor.jar", "../../lib.java/third_party/android_deps/org_ow2_asm_asm.jar", "../../lib.java/third_party/android_deps/org_ow2_asm_asm_tree.jar", "../../lib.java/third_party/android_deps/org_ow2_asm_asm_analysis.jar", "../../lib.java/third_party/android_deps/org_ow2_asm_asm_util.jar"]
extra_program_args = []
java_path = '../../../../../../third_party/jdk/current/bin/java'
if os.getcwd() != self_dir:
  offset = os.path.relpath(self_dir, os.getcwd())
  fix_path = lambda p: os.path.normpath(os.path.join(offset, p))
  classpath = [fix_path(p) for p in classpath]
  java_path = fix_path(java_path)
java_cmd = [java_path]
# This is a simple argparser for jvm, jar, and classpath arguments.
parser = argparse.ArgumentParser(add_help=False)
parser.add_argument('--jar-args')
parser.add_argument('--jvm-args')
parser.add_argument('--classpath')
# Test_runner parses the classpath for sharding junit tests.
parser.add_argument('--print-classpath', action='store_true',
                    help='Prints the classpass. Used by test_runner.')
known_args, unknown_args = parser.parse_known_args(sys.argv[1:])

if known_args.print_classpath:
  sys.stdout.write(':'.join(classpath))
  sys.exit(0)

if known_args.jvm_args:
  jvm_arguments = known_args.jvm_args.strip('"').split()
  java_cmd.extend(jvm_arguments)
if known_args.jar_args:
  jar_arguments = known_args.jar_args.strip('"').split()
  if unknown_args:
    raise Exception('There are unknown arguments')
else:
  jar_arguments = unknown_args

if known_args.classpath:
  classpath += [known_args.classpath]


java_cmd.extend(
    ['-classpath', ':'.join(classpath), '-enableassertions', "org.chromium.bytecode.ByteCodeProcessor"])
java_cmd.extend(extra_program_args)
java_cmd.extend(jar_arguments)
os.execvp(java_cmd[0], java_cmd)
